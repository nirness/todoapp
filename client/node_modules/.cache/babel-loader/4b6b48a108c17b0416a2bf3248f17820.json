{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport thunkPromiseHandler from \"../../scripts/thunkPromiseHandler\";\nimport protectedRequest from \"../../scripts/protectedRequest\";\nexport const thunks = {\n  fetchTodos: createAsyncThunk(\"todos/fetchTodos\", async (_, thunkAPI) => thunkPromiseHandler(protectedRequest().get(\"/api/todos/me\"), thunkAPI)),\n  createTodos: createAsyncThunk(\"todos/createTodos\", async (todo, thunkAPI) => thunkPromiseHandler(protectedRequest().post(\"/api/todos\", todo), thunkAPI)),\n  deleteTodo: createAsyncThunk(\"todos/deleteTodo\", async (todo, thunkAPI) => thunkPromiseHandler(protectedRequest().delete(`/api/todos/${todo._id}`), thunkAPI))\n};\nexport const {\n  reducer,\n  actions\n} = createSlice({\n  name: \"todos\",\n  initialState: {\n    isLoading: false,\n    todos: []\n  },\n  reducers: {},\n\n  extraReducers(_ref) {\n    let {\n      addCase\n    } = _ref;\n    addCase(thunks.fetchTodos.pending, state => {\n      state.isLoading = true;\n    });\n    addCase(thunks.fetchTodos.fulfilled, (state, _ref2) => {\n      let {\n        payload: todos\n      } = _ref2;\n      state.isLoading = false;\n      state.todos = todos;\n    });\n    addCase(thunks.fetchTodos.rejected, (state, _ref3) => {\n      let {\n        payload: errorMessage\n      } = _ref3;\n      state.isLoading = false;\n      alert(errorMessage);\n    });\n  }\n\n}); // updateTodo : createAsyncThunk(\"todos/updateTodo\", async (todo, thunkAPI) => (\n//     thunkPromiseHandler(protectedRequest().put(\"/api/todos/me\"), thunkAPI)\n// )),\n// deleteTodo : createAsyncThunk(\"todos/deleteTodo\", async (_, thunkAPI) => (\n//     thunkPromiseHandler(protectedRequest().get(\"/api/todos/me\"), thunkAPI)\n// )),\n// deleteAll : createAsyncThunk(\"todos/deleteAll\", async (_, thunkAPI) => (\n//     thunkPromiseHandler(protectedRequest().get(\"/api/todos/me\"), thunkAPI)\n// )),","map":{"version":3,"names":["createSlice","createAsyncThunk","thunkPromiseHandler","protectedRequest","thunks","fetchTodos","_","thunkAPI","get","createTodos","todo","post","deleteTodo","delete","_id","reducer","actions","name","initialState","isLoading","todos","reducers","extraReducers","addCase","pending","state","fulfilled","payload","rejected","errorMessage","alert"],"sources":["/Users/nirness/Desktop/mern-todos-application/client/src/global/slices/todosSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\"\nimport thunkPromiseHandler from \"../../scripts/thunkPromiseHandler\"\nimport protectedRequest from \"../../scripts/protectedRequest\"\n\nexport const thunks = {\n    fetchTodos : createAsyncThunk(\"todos/fetchTodos\", async (_, thunkAPI) => (\n        thunkPromiseHandler(protectedRequest().get(\"/api/todos/me\"), thunkAPI)\n    )),\n    createTodos : createAsyncThunk(\"todos/createTodos\", async (todo, thunkAPI) => (\n        thunkPromiseHandler(protectedRequest().post(\"/api/todos\", todo), thunkAPI)\n    )),\n    deleteTodo : createAsyncThunk(\"todos/deleteTodo\", async (todo, thunkAPI) => (\n        thunkPromiseHandler(protectedRequest().delete(`/api/todos/${todo._id}`), thunkAPI)\n    )),\n}\n\nexport const { reducer, actions } = createSlice({\n    name: \"todos\", \n    initialState : {\n        isLoading : false, \n        todos : [],\n    },\n    reducers : { },\n    extraReducers({addCase}) {\n        addCase(thunks.fetchTodos.pending, (state) => {\n            state.isLoading = true\n        })\n        addCase(thunks.fetchTodos.fulfilled, (state, { payload:todos }) => {\n            state.isLoading = false\n            state.todos = todos\n        })\n        addCase(thunks.fetchTodos.rejected, (state, { payload:errorMessage}) => {\n            state.isLoading = false\n            alert(errorMessage)\n        })\n    }\n})\n\n\n\n    // updateTodo : createAsyncThunk(\"todos/updateTodo\", async (todo, thunkAPI) => (\n    //     thunkPromiseHandler(protectedRequest().put(\"/api/todos/me\"), thunkAPI)\n    // )),\n    // deleteTodo : createAsyncThunk(\"todos/deleteTodo\", async (_, thunkAPI) => (\n    //     thunkPromiseHandler(protectedRequest().get(\"/api/todos/me\"), thunkAPI)\n    // )),\n    // deleteAll : createAsyncThunk(\"todos/deleteAll\", async (_, thunkAPI) => (\n    //     thunkPromiseHandler(protectedRequest().get(\"/api/todos/me\"), thunkAPI)\n    // )),"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,mBAAP,MAAgC,mCAAhC;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;AAEA,OAAO,MAAMC,MAAM,GAAG;EAClBC,UAAU,EAAGJ,gBAAgB,CAAC,kBAAD,EAAqB,OAAOK,CAAP,EAAUC,QAAV,KAC9CL,mBAAmB,CAACC,gBAAgB,GAAGK,GAAnB,CAAuB,eAAvB,CAAD,EAA0CD,QAA1C,CADM,CADX;EAIlBE,WAAW,EAAGR,gBAAgB,CAAC,mBAAD,EAAsB,OAAOS,IAAP,EAAaH,QAAb,KAChDL,mBAAmB,CAACC,gBAAgB,GAAGQ,IAAnB,CAAwB,YAAxB,EAAsCD,IAAtC,CAAD,EAA8CH,QAA9C,CADO,CAJZ;EAOlBK,UAAU,EAAGX,gBAAgB,CAAC,kBAAD,EAAqB,OAAOS,IAAP,EAAaH,QAAb,KAC9CL,mBAAmB,CAACC,gBAAgB,GAAGU,MAAnB,CAA2B,cAAaH,IAAI,CAACI,GAAI,EAAjD,CAAD,EAAsDP,QAAtD,CADM;AAPX,CAAf;AAYP,OAAO,MAAM;EAAEQ,OAAF;EAAWC;AAAX,IAAuBhB,WAAW,CAAC;EAC5CiB,IAAI,EAAE,OADsC;EAE5CC,YAAY,EAAG;IACXC,SAAS,EAAG,KADD;IAEXC,KAAK,EAAG;EAFG,CAF6B;EAM5CC,QAAQ,EAAG,EANiC;;EAO5CC,aAAa,OAAY;IAAA,IAAX;MAACC;IAAD,CAAW;IACrBA,OAAO,CAACnB,MAAM,CAACC,UAAP,CAAkBmB,OAAnB,EAA6BC,KAAD,IAAW;MAC1CA,KAAK,CAACN,SAAN,GAAkB,IAAlB;IACH,CAFM,CAAP;IAGAI,OAAO,CAACnB,MAAM,CAACC,UAAP,CAAkBqB,SAAnB,EAA8B,CAACD,KAAD,YAA8B;MAAA,IAAtB;QAAEE,OAAO,EAACP;MAAV,CAAsB;MAC/DK,KAAK,CAACN,SAAN,GAAkB,KAAlB;MACAM,KAAK,CAACL,KAAN,GAAcA,KAAd;IACH,CAHM,CAAP;IAIAG,OAAO,CAACnB,MAAM,CAACC,UAAP,CAAkBuB,QAAnB,EAA6B,CAACH,KAAD,YAAoC;MAAA,IAA5B;QAAEE,OAAO,EAACE;MAAV,CAA4B;MACpEJ,KAAK,CAACN,SAAN,GAAkB,KAAlB;MACAW,KAAK,CAACD,YAAD,CAAL;IACH,CAHM,CAAP;EAIH;;AAnB2C,CAAD,CAAxC,C,CAwBH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}